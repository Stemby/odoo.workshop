[
{
	"uri": "https://metadonors.github.io/odoo.workshop/basics/precorso/",
	"title": "Precorso",
	"tags": [],
	"description": "",
	"content": " Prima di arrivare al corso sarebbe opportuno avere già installati e funzionanti un edito di testo, Git, Docker e Docker Compose\nEditor di testo Non ci sono preferenze per l\u0026rsquo;editor di testo, ovviamente è opportuno usarne uno che aiuti a lavorare con codice python e javascript\nUn elenco di alcuni possibili editor:\n VSCode https://code.visualstudio.com/ Atom https://atom.io/ Sublime Text https://www.sublimetext.com/  Git L\u0026rsquo;installazione di Git varia in base al sistema operativo utilizzato, ecco come procedere:\nLinux Su Ubuntu/Debian è sufficiente dare da terminale:\n$ sudo apt install git  Su Redhat/Centos\n$ sudo yum install git  Mac Su mac, se non l\u0026rsquo;avete gia\u0026rsquo; fatto, prima dell\u0026rsquo;installazione di Git bisogna procedere a installare Homebrew (cosa piuttosto importante se si intende sviluppare software)\nAprite un terminale e copia-incollate il seguente comando:\nruby -e \u0026quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\u0026quot; brew doctor  Vi chiedera di installare la Command Line Developer Tool di Apple. Cliccate Install per confermare. Una volta terminato premete Invio per terminare l\u0026rsquo;installazione di Homebrew.\nEffettuato queso passaggio potete installare Git da terminale con il comando:\nbrew install git  Windows Su Windows scaricate l\u0026rsquo;applicazione Git for Windows e installatela\nDocker e Docker Compose Docker è uno strumento di pacchetizzazione generico per le nostre applicazioni. Semplifica l\u0026rsquo;installazione di ambienti complessi sia in fase di sviluppo che di produzione. Per noi è utile per riuscire ad avere una piattaforma uguale per tutti su cui lavorare. Il risultato di una pacchettizzazione con Docker è chiamato Container. Un container è a tutti gli effetti un eseguibile che potete lanciare da linea di comando passandogli parametri secondo necessità.\nNon è necessario utilizzare la versione Enterprise (EE), utilizzeremo la Community Edition (CE) che ha tutte le funzionalità necessarie (ma senza la stessa assistenza)\nDocker Compose invece serve a definire e lanciare diversi container in maniera orchestrata. Con compose si utilizza un file di configurazione YAML per definire tutti i servizi di cui è composta la nostra applicazione, per esempio: odoo, il database e il server web. Una volta terminata la configurazione è possibile creare e lanciare tutti i servizi di cui abbiamo bisogno con un singolo comando.\nAnche per questi strumenti l\u0026rsquo;installazione varia in base al sistema operativo usato.\nLinux Docker Per Ubuntu:\nPer prima cosa aggiungete il repository docker ufficiale:\n$ sudo add-apt-repository \\ \u0026quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) \\ stable\u0026quot;  Aggiornate l\u0026rsquo;indice dei pacchetti:\n$ sudo apt-get update  Infine installate l\u0026rsquo;ultima versione di docker:\n$ sudo apt-get install docker-ce  Per le altre distribuzioni e\u0026rsquo; possibile trovare le istruzioni dettagliate nella pagina ufficiale della documentazione di Docker\nDocker Compose Per installare Compose:\nScaricate l\u0026rsquo;eseguibile con il comando:\nsudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose  Aggiungete il permesso d\u0026rsquo;esecuizione al file binario:\nsudo chmod +x /usr/local/bin/docker-compose  Testate l\u0026rsquo;installazione con:\n$ docker-compose --version docker-compose version 1.21.2, build 1719ceb  Mac Docker e Docker Compose Per Mac è sufficiente scaricare l\u0026rsquo;applicazione ufficiale dall\u0026rsquo;Docker Store\nPer maggiori informazioni qui trovate la pagina di documentazione specifica\nWindows Docker e Docker Compose Come per Mac è sufficiente scaricare l\u0026rsquo;applicazione ufficiale dall\u0026rsquo;Docker Store\nPer maggiori informazioni qui trovate la pagina di documentazione specifica\nContinua\u0026hellip; Una volta terminata questa procedura siete pronti ad iniziare il corso installando l\u0026rsquo;ambiete di sviluppo Odoo\n"
},
{
	"uri": "https://metadonors.github.io/odoo.workshop/basics/",
	"title": "Iniziare",
	"tags": [],
	"description": "",
	"content": " Capitolo 1 Iniziare Per imparare è necessario poterci mettere le mani sopra, quindi installiamo il necessario\n"
},
{
	"uri": "https://metadonors.github.io/odoo.workshop/models/",
	"title": "Modelli e Campi",
	"tags": [],
	"description": "",
	"content": " Chapter2 Modellazione dei Dati Odoo è un framework MVC, i Modelli sono la M del paradigma e ci permettono di rappresentare i nostri dati in maniera strutturata, come per esempio i Prodotti, le Vendite, le Fatture o i Clienti. Vediamo come vengono definiti in Odoo.\n"
},
{
	"uri": "https://metadonors.github.io/odoo.workshop/basics/installazione/",
	"title": "Installazione",
	"tags": [],
	"description": "",
	"content": " Una volta installati gli strumenti di sviluppo come descritto nella sezione Precorso possiamo procedere ad installare l\u0026rsquo;ambiente di odoo che utilizzeremo in questo corso.\nInstallazione dell\u0026rsquo;ambiente di sviluppo Scaricate l\u0026rsquo;ambiente docker che utilizzeremo dal github in una cartella sul nostro computer. Aprite un terminale e digitate:\n$ git clone https://github.com/metadonors/odoo.docker.git  Entriamo nella cartella appena scaricata:\n$ cd odoo.docker  Infine diciamo a compose di tirare su l\u0026rsquo;ambiente:\n$ docker-compose up  Compose comincerà a scaricare tutte le nostre dipendenze, odoo, nginx e il database. La procedura può metterci diversi minuti in base alla connessione a internet disponibile.\nIn seguito verranno avviati i vari componenti: odoo, postgres - il database - e nginx - il server web. Al primo avvio odoo dovrà inizializzare la struttura del database (anche questa operazione potrebbe impiegare qualche minuto).\nUna volta terminata, aprite il vostro browser all\u0026rsquo;indirizzo:\nhttp://localhost\ndovreste vedere la schermata di accesso di Odoo. Per entrare inserite le credenziali predefinite:\nUsername: admin Password: admin\nContinua\u0026hellip; Una volta terminata l\u0026rsquo;installazione possiamo affrontare i concetti base\n"
},
{
	"uri": "https://metadonors.github.io/odoo.workshop/basics/concetti/",
	"title": "Concetti Base",
	"tags": [],
	"description": "",
	"content": " Prima di cominciare è necessario affrontare un po\u0026rsquo; di teoria che sta alla base del framework Odoo. Odoo è un framework applicativo modulare, i suoi principali componenti sono i moduli e le applicazioni.\nModuli I moduli sono i componenti essenziali che possono essere aggiunti a Odoo. Ogni modulo può implementare nuove funzionalità oppure modificare quelle esistenti. Ogni modulo è costituito da una cartella contenente un file __manfifest.py__ più altri file che implementano le sue funzionalità.\nApplicazioni Le applicazioni sono moduli di ordine maggiore, che implementano funzionalità a più alto livello o sempliccemente più complesse. Sono gli elementi essenziali dell\u0026rsquo;aspetto funzionale, come per esempio l\u0026rsquo;applicazione CRM o Contabilità e sono a loro volta basate sulle funzionalità di tanti moduli.\nSe state implementando un modulo complesso che aggiunge funzionalità specifiche a Odoo è probabile che sia un applicazione. Se state aggiungendo o modificando alcuni semplici aspetti invece è probabile che stiate sscrivendo un modulo.\nTecnicamente non c\u0026rsquo;è nessuna differenza fra i due, semplicemente le applicazioni vengono mostrate nell\u0026rsquo;elenco delle App disponibili all\u0026rsquo;utente.\nAdattare il sistema Generalmmente per adattare Odoo alle diverse esigenze non si modifica mai il codice esistente. Piuttosto si creano nuovi moduli che vanno a innestarsi sugli esistenti per modificare le funzionailtà.\nIn questo corso creeremo un applicazione con pochissime dipendenze, per questioni pratiche, ma nei casi reali è molto più probabile andare a lavorare sui moduli core di odoo oppure su moduli terzi resi disponibili da altri sviluppatori.\nInstalliamo il nostro primo modulo Per fare un esempio, procediamo all\u0026rsquo;installazione di un modulo fornito dalla comunità. Installeremo un modulo che estende la ui del nostro backend rendendola più simile alla versione di Odoo Enterprise.\nIl modulo è già stato pacchettizzato e inserito nel codice, possiamo quindi procedere con l\u0026rsquo;installazione da interfaccia web.\nAndiamo su http://localhost mettiamo username e password e accediamo alla lista delle app.\nDeselezioniamo il filtro \u0026ldquo;Apps\u0026rdquo; dalla barra di ricerca e inseriamo la stringa \u0026ldquo;Material\u0026rdquo;\nClicchiamo su Install e\u0026hellip;fatto. Abbiamo installato il nostro primo modulo e subito il nostro odoo ha un look più moderno.\nContinua Ora possiamo andare a creare la nostra prima applicazione\n"
},
{
	"uri": "https://metadonors.github.io/odoo.workshop/computedfields/",
	"title": "Computed Fields e Vincoli",
	"tags": [],
	"description": "",
	"content": " Chapter X Some Chapter title Lorem Ipsum.\n"
},
{
	"uri": "https://metadonors.github.io/odoo.workshop/basics/primo_modulo/",
	"title": "La prima applicazione",
	"tags": [],
	"description": "",
	"content": " In questa sezione andremo a creare il nostro primo modulo. L\u0026rsquo;applicazione d\u0026rsquo;esempio che creeremo durante il corso è una classica Todo App. Per realizzarla attraverseremo le classiche fasi di sviluppo di un applicazione Odoo.\nLo scheletro del modulo Odoo offre un suo meccanismo di scaffolding piuttosto primitivo per creare nuovi moduli, è possibile visualizzare il suo funzionamento lanciando questo comando dalla cartella contente l\u0026rsquo;ambiente odoo.dockerenv:\n$ docker-compose run odoo odoo scaffold --help  Nella pratica la comunità si è però concentrata su un altro strumento di scaffolding, mrbob con i template specifici per gli addon Odoo.\nVi può essere utile quando affronterete il vostro primo modulo in autonomia, ma durante questo corso creeremo tutta la struttura manualmente in modo da capirne meglio i vari aspetti.\nQuindi cominciamo Un modulo Odoo è una cartella contenente un file __manifest__.py. La cartella deve essere anche un modulo python valido, deve quindi contenere un file __init__.py.\nIl nome della cartella del modulo è un nome tecnico non visibile all\u0026rsquo;utente, deve essere valido in python quindi niente deve cominciare con una lettera e sono validi solo lettere, numeri e underscore. Nel nostro caso useremo quindi il nome todo_app.\nPer effetture queste prime operazioni da linea di comando, aprite un terminale e digitate:\n# Entriamo nella cartella degli addons $ cd odoo.dockerenv/addons # Creiamo la cartella del modulo $ mkdir todo_app # Creiamo il file __init__.py $ touch todo_app/__init__.py # Creiamo il file __manifest__.py $ touch todo_app/__manifest__.py  A questo punto è ora di aprire il nostro editor di testo per modificare il file __manifest__.py, dove inseriremo il seguente contenuto:\n{ 'name': 'Applicazione TODO', 'description': 'Gestisci i tuoi TODO', 'author': 'Fabrizio Arzeni', 'depends': ['base'], 'application': True }  Il campo depends indica i moduli da cui dipende la nostra applicazione, se non sono presenti quando verra installata, Odoo li installerà automaticamente. È necessario inserirla soprattutto quando si fa riferimento a funzionalità di terze parti.\nIn questo caso abbiamo usato solo alcuni dei valori definibili nel manifesto di un modulo, nei casi reali questo file è sarà più complesso. Per una spiegazione più dettagliata del suo contenuto potete consultare la pagina della documentazione di Odoo sul file manifest.\nI path degli addon Nel nostro caso Odoo sarà in grado di trovare questa applicazione perchè l\u0026rsquo;abbiamo creata nella cartella addons dell\u0026rsquo;ambiente. Ma quella cartella è stata configurata per essere fra quelle papabili dove Odoo cerca gli addon all\u0026rsquo;avvio. È possibile specificare diversi percorsi dove odoo cerca gli addons disponibili ad essere installati, fate riferimento alla variabile addons-path disponibile sia nel file di confiurazione di odoo che da linea di comando.\nInstallazione del modulo A questo punto è possibile installare il modulo. Come abbiamo fatto nella sezione precedente possiamo andare nella lista delle App, scrive todo nella barra di ricerca e cliccare sul pulsante installa sul nostro modulo.\nMa\u0026hellip;il nostro modulo non c\u0026rsquo;è.\nLa modalità sviluppatore Il nostro modulo non c\u0026rsquo;è perchè Odoo nella sua fase iniziale mette in cache tutti i moduli che sono presenti in quel momento. Per far apparire il nostro modulo dobbiamo dirgli di ricaricare la lista delle applicazioni.\nPer farlo dobbiamo entrare nella modalità sviluppatore che sarà essenziale per tutto il nostro lavoro.\nPer attivarla bisogna andare nell\u0026rsquo;applicazione \u0026lsquo;Settings\u0026rsquo; e premere sulla scritta \u0026lsquo;Activate the developer mode\u0026rsquo; presente sulla destra sotto la versione di Odoo.\nUna volta fatto possiamo tornare nella lista delle App e a questo punto sarà presente il bottone \u0026lsquo;Update App List\u0026rsquo;. Premetelo e rieffettuate la ricerca del modulo todo che dovrebbe essere ora disponibile per essere installato\nCliccate su installa ed il primo passo è compiuto\nNota bene Sviluppare moduli è un processo iterativo e spesso dopo dei cambiamenti, in particolare sul database, sarà necessario riavviare odoo dicendogli esplicitamente di aggiornare i moduli interessati. Se la modifica invece è solo al codice python o a delle viste sarà sufficiente riaggiornare la pagina perchè il sistema è stato lanciato in modalita di sviluppo (con l\u0026rsquo;opzione \u0026ndash;dev=all vedi docker-compose.yml). In fase di produzione qualsiasi aggiornamento comporta il riavvio del sistema\nContinua Ora che abbiamo creato e installato la nostra prima applicazione possiamo continuare andando a modellare i nostri dati definendo Modelli e Campi.\n"
},
{
	"uri": "https://metadonors.github.io/odoo.workshop/views/",
	"title": "Views e Actions",
	"tags": [],
	"description": "",
	"content": " Chapter X Some Chapter title Lorem Ipsum.\n"
},
{
	"uri": "https://metadonors.github.io/odoo.workshop/inheritance/",
	"title": "Inheritance",
	"tags": [],
	"description": "",
	"content": " Chapter X Some Chapter title Lorem Ipsum.\n"
},
{
	"uri": "https://metadonors.github.io/odoo.workshop/",
	"title": "Index",
	"tags": [],
	"description": "",
	"content": " Mantova, 4 Luglio 2018 Odoo WorkShop Riferimenti Il modulo che svilupperemo:\nTodo List App\nIl nostro repository di riferimento:\nOdoo 11 - Immagine Docker\nLa documentazione ufficiale di odoo:\nDocumentazione Odoo\nLa nostra azienda:\nMetadonors\n"
},
{
	"uri": "https://metadonors.github.io/odoo.workshop/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://metadonors.github.io/odoo.workshop/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]