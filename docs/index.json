[
{
	"uri": "https://metadonors.github.io/odoo.workshop/basics/precorso/",
	"title": "Precorso",
	"tags": [],
	"description": "",
	"content": " Prima di arrivare al corso sarebbe opportuno avere già installati e funzionanti un edito di testo, Git, Docker e Docker Compose\nEditor di testo Non ci sono preferenze per l\u0026rsquo;editor di testo, ovviamente è opportuno usarne uno che aiuti a lavvorare con codice python e javascript\nUn elenco di alcuni possibili editor:\n VSCode https://code.visualstudio.com/ Atom https://atom.io/ Sublime Text https://www.sublimetext.com/  Git L\u0026rsquo;installazione di Git varia in base al sistema operativo utilizzato, ecco come procedere:\nLinux Su Ubuntu/Debian è sufficiente dare da terminale:\n$ sudo apt install git  Su Redhat/Centos\n$ sudo yum install git  Mac Su mac, se non l\u0026rsquo;avete gia\u0026rsquo; fatto, prima dell\u0026rsquo;installazione di Git bisogna procedere a installare Homebrew (cosa piuttosto importante se si intende sviluppare software)\nAprite un terminale e copia-incollate il seguente comando:\nruby -e \u0026quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\u0026quot; brew doctor  Vi chiedera di installare la Command Line Developer Tool di Apple. Cliccate Install per confermare. Una volta terminato premete Invio per terminare l\u0026rsquo;installazione di Homebrew.\nUna volta effettuato queso passaggio potete installare Git da terminale con il comando:\nbrew install git  Windows Su Windows scaricate l\u0026rsquo;applicazione Git for Windows e installatela\nDocker e Docker Compose Docker è uno strumento di pacchetizzazione generico per le nostre applicazioni. Semplifica l\u0026rsquo;installazione di ambienti complessi sia in fase di sviluppo che di produzione. Per noi è utile per riuscire ad avere una piattaforma uguale per tutti su cui lavorare. Il risulatato di una pacchettizzazione con Docker è chiamata Container.\nNon è necessario utilizzare la versione Enterprise (EE), utilizzeremo la Community Edition (CE) che ha tutte le funzionalità necessarie (ma senza la stessa assistenza)\nDocker Compose invece serve a definire e lanciare diversi container in maniera orchestrata. Con compose si utilizza un file di configurazione YAML per definire tutti i servizi di cui è composta la nostra applicazione, per esempio: odoo, il database e il server web. In seguito con un singolo comando è possibile creare e lanciare tutti i servizi definiti nella configurazione.\nAnche per questi strumenti l\u0026rsquo;installazione varia in base al sistema operativo usato.\nLinux Docker Per Ubuntu:\nPer prima cosa aggiungete il repository docker ufficiale:\n$ sudo add-apt-repository \\ \u0026quot;deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) \\ stable\u0026quot;  Aggiornate l\u0026rsquo;indice dei pacchetti:\n$ sudo apt-get update  Infine installate l\u0026rsquo;ultima versione di docker:\n$ sudo apt-get install docker-ce  Per le altre distribuzioni e\u0026rsquo; possibile trovare le istruzioni dettagliate nella pagina ufficiale della documentazione di Docker\nDocker Compose Per installare Compose:\nScaricate l\u0026rsquo;eseguibile con il comando:\nsudo curl -L https://github.com/docker/compose/releases/download/1.21.2/docker-compose-$(uname -s)-$(uname -m) -o /usr/local/bin/docker-compose  Aggiungete il permesso d\u0026rsquo;esecuizione al file binario:\nsudo chmod +x /usr/local/bin/docker-compose  Testate l\u0026rsquo;installazione con:\n$ docker-compose --version docker-compose version 1.21.2, build 1719ceb  Mac Docker e Docker Compose Per Mac è sufficiente scaricare l\u0026rsquo;applicazione ufficiale dall\u0026rsquo;Docker Store\nPer maggiori informazioni qui trovate la pagina di documentazione specifica\nWindows Docker e Docker Compose Come per Mac è sufficiente scaricare l\u0026rsquo;applicazione ufficiale dall\u0026rsquo;Docker Store\nPer maggiori informazioni qui trovate la pagina di documentazione specifica\nContinua\u0026hellip; Una volta terminata questa procedura siete pronti ad iniziare il corso installando l\u0026rsquo;ambiete di sviluppo Odoo\n"
},
{
	"uri": "https://metadonors.github.io/odoo.workshop/basics/",
	"title": "Iniziare",
	"tags": [],
	"description": "",
	"content": " Capitolo 1 Iniziare Per imparare è necessario poterci mettere le mani sopra, quindi installiamo il necessario\n"
},
{
	"uri": "https://metadonors.github.io/odoo.workshop/models/",
	"title": "Modelli e Campi",
	"tags": [],
	"description": "",
	"content": " Chapter X Some Chapter title Lorem Ipsum.\n"
},
{
	"uri": "https://metadonors.github.io/odoo.workshop/basics/installazione/",
	"title": "Installazione",
	"tags": [],
	"description": "",
	"content": " Una volta installati gli strumenti di sviluppo come descritto nella sezione Precorso possiamo procedere ad installare l\u0026rsquo;ambiente di odoo che utilizzeremo in questo corso.\nInstallazione dell\u0026rsquo;ambiente di sviluppo Scaricate l\u0026rsquo;ambiente docker che utilizzeremo dal github in una cartella sul nostro computer. Aprite un terminale e digitate:\n$ git clone https://github.com/metadonors/odoo.docker.git  Entriamo nella cartella appena scaricata:\n$ cd odoo.docker  Infine diciamo a compose di tirare su l\u0026rsquo;ambiente:\n$ docker-compose up  Compose comincerà a scaricare tutte le nostre dipendenze, odoo, nginx e il database. La procedura può metterci diversi minuti in base alla connessione a internet disponibile.\nIn seguito verranno avviati i vari componenti: odoo, postgres - il database - e nginx - il server web. Al primo avvio odoo dovrà inizializzare la struttura del database (anche questa operazione potrebbe impiegare qualche minuto).\nUna volta terminata, aprite il vostro browser all\u0026rsquo;indirizzo:\nhttp://localhost\ndovreste vedere la schermata di accesso di Odoo. Per entrare inserite le credenziali predefinite:\nUsername: admin Password: admin\nContinua\u0026hellip; Una volta terminata l\u0026rsquo;installazione possiamo procere a creare la nostra prima applicazione\n"
},
{
	"uri": "https://metadonors.github.io/odoo.workshop/basics/primo_modulo/",
	"title": "La prima applicazione",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://metadonors.github.io/odoo.workshop/computedfields/",
	"title": "Computed Fields e Vincoli",
	"tags": [],
	"description": "",
	"content": " Chapter X Some Chapter title Lorem Ipsum.\n"
},
{
	"uri": "https://metadonors.github.io/odoo.workshop/views/",
	"title": "Views e Actions",
	"tags": [],
	"description": "",
	"content": " Chapter X Some Chapter title Lorem Ipsum.\n"
},
{
	"uri": "https://metadonors.github.io/odoo.workshop/inheritance/",
	"title": "Inheritance",
	"tags": [],
	"description": "",
	"content": " Chapter X Some Chapter title Lorem Ipsum.\n"
},
{
	"uri": "https://metadonors.github.io/odoo.workshop/",
	"title": "Index",
	"tags": [],
	"description": "",
	"content": " Mantova, 4 Luglio 2018 Odoo WorkShop Riferimenti Il modulo che svilupperemo:\nTodo List App\nIl nostro repository di riferimento:\nOdoo 11 - Immagine Docker\nLa documentazione ufficiale di odoo:\nDocumentazione Odoo\nLa nostra azienda:\nMetadonors\n"
},
{
	"uri": "https://metadonors.github.io/odoo.workshop/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "https://metadonors.github.io/odoo.workshop/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]