<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Index on Odoo Workshop</title>
    <link>https://metadonors.github.io/odoo.workshop/</link>
    <description>Recent content in Index on Odoo Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>it-it</language>
    <lastBuildDate>Wed, 27 Jun 2018 15:32:30 +0200</lastBuildDate>
    
	<atom:link href="https://metadonors.github.io/odoo.workshop/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Preambolo</title>
      <link>https://metadonors.github.io/odoo.workshop/inheritance/teoria/</link>
      <pubDate>Thu, 28 Jun 2018 16:39:19 +0200</pubDate>
      
      <guid>https://metadonors.github.io/odoo.workshop/inheritance/teoria/</guid>
      <description>Per apportare modifiche o aggiungere funzionalità ai moduli e alle applicazioni esistenti, Odoo ci mette a disposizione diversi strumenti in base a cosa e dove vogliamo intervenire.
Odoo ha dai meccanismi interni specifici che si basano sul concetto di Ereditarietà. Tramite questi meccanismi e&amp;rsquo; possibile modificare Modelli esistenti, Viste oppure Dati (come le regole di accesso).
In questo capito andremo ad aggiungere una funzionalità all&amp;rsquo;applicazione Todo creata in precedenza. Attualmente ogni utente può lavorare solo sui suoi task, perchè non aggiungere qualche funzionalità di social networking come la possibilità di condividere i task e di commentarli con diversi utenti?</description>
    </item>
    
    <item>
      <title>Preambolo</title>
      <link>https://metadonors.github.io/odoo.workshop/models/preambolo/</link>
      <pubDate>Thu, 28 Jun 2018 16:39:19 +0200</pubDate>
      
      <guid>https://metadonors.github.io/odoo.workshop/models/preambolo/</guid>
      <description>Per andare a esplorare cosa possiamo fare con i nostri modelli prepariamoci prima un nuovo modulo che estende gli esistenti. Per analizzare come funzionano le relazioni aggiungeremo anche un paio di modelli.
 TodoProjects progetti per raggruppare i task TodoTag tag per poter classificare i vari task  Abbiamo gia&amp;rsquo; un modulo preparato con queste modifiche, l&amp;rsquo;unica cosa che dobbiamo fare è scaricarlo nella nostra directory addons.
Per farlo, da terminale, entriamo nella cartella addons</description>
    </item>
    
    <item>
      <title>Scaffolding</title>
      <link>https://metadonors.github.io/odoo.workshop/first_app/primo_modulo/</link>
      <pubDate>Wed, 27 Jun 2018 17:59:32 +0200</pubDate>
      
      <guid>https://metadonors.github.io/odoo.workshop/first_app/primo_modulo/</guid>
      <description>In questa sezione andremo a creare il nostro primo modulo. L&amp;rsquo;applicazione d&amp;rsquo;esempio che creeremo durante il corso è una classica Todo App. Per realizzarla attraverseremo le classiche fasi di sviluppo di un applicazione Odoo.
Lo scheletro del modulo Odoo offre un suo meccanismo di scaffolding piuttosto primitivo per creare nuovi moduli, è possibile visualizzare il suo funzionamento lanciando questo comando dalla cartella contente l&amp;rsquo;ambiente odoo.dockerenv:
$ docker-compose run odoo odoo scaffold --help  Nella pratica la comunità si è però concentrata su un altro strumento di scaffolding, mrbob con i template specifici per gli addon Odoo.</description>
    </item>
    
    <item>
      <title>Precorso</title>
      <link>https://metadonors.github.io/odoo.workshop/basics/precorso/</link>
      <pubDate>Wed, 27 Jun 2018 16:37:24 +0200</pubDate>
      
      <guid>https://metadonors.github.io/odoo.workshop/basics/precorso/</guid>
      <description>Prima di arrivare al corso sarebbe opportuno avere già installati e funzionanti un edito di testo, Git, Docker e Docker Compose
Editor di testo Non ci sono preferenze per l&amp;rsquo;editor di testo, ovviamente è opportuno usarne uno che aiuti a lavorare con codice python e javascript
Un elenco di alcuni possibili editor:
 VSCode https://code.visualstudio.com/ Atom https://atom.io/ Sublime Text https://www.sublimetext.com/  Git L&amp;rsquo;installazione di Git varia in base al sistema operativo utilizzato, ecco come procedere:</description>
    </item>
    
    <item>
      <title>Campi Base</title>
      <link>https://metadonors.github.io/odoo.workshop/models/campi_base/</link>
      <pubDate>Thu, 28 Jun 2018 16:52:23 +0200</pubDate>
      
      <guid>https://metadonors.github.io/odoo.workshop/models/campi_base/</guid>
      <description>L&amp;rsquo;ORM di Odoo permette di creare modelli complessi composti da attributi basa su tipi di campi semplici. Questi campi mappano direttamente sul database e, in base al tipo, possono avere comportamenti differenti a livello di interfaccia utente. I campi di testo verranno renderizzati come semplici tag &amp;lt;input&amp;gt;, le date presenteranon un calendario, le selezioni multiple un tag &amp;lt;select&amp;gt; e così via.
Tipi di Campi Ogni tipo di campo ha può accettare una serie di parametri che variano il suo comportamento.</description>
    </item>
    
    <item>
      <title>Estendere i Modelli</title>
      <link>https://metadonors.github.io/odoo.workshop/inheritance/estendere_modelli/</link>
      <pubDate>Thu, 28 Jun 2018 16:39:19 +0200</pubDate>
      
      <guid>https://metadonors.github.io/odoo.workshop/inheritance/estendere_modelli/</guid>
      <description>In Odoo i nuovi modelli, o le estensioni di quelli esistenti, si creano definendo delle classi Python specifiche. Il meccanismo di ereditarietà di Odoo non si base su quello delle classi Python, ma su un suo approccio interno che si basa sull&amp;rsquo;attributo _inherit specificato nella class.
In base a come viene utilizzato si possono ottenere differeneti meccanismi di ereditarietà.
Noi cominceremo con il più semplice dove la classe figlia eredita tutte le funzionalità del padre e dove noi possiamo semplicemente apportare le modifiche che ci interessano.</description>
    </item>
    
    <item>
      <title>I modelli</title>
      <link>https://metadonors.github.io/odoo.workshop/first_app/primo_modello/</link>
      <pubDate>Thu, 28 Jun 2018 10:36:46 +0200</pubDate>
      
      <guid>https://metadonors.github.io/odoo.workshop/first_app/primo_modello/</guid>
      <description>Ora che abbiamo la nostra prima applicazione iniziamo ad aggiungere un semplice modello.
I modelli sono la M del paradigma MVC, rappresento i dati su cui la nostra applicazione lavora. Sono dei modelli i Prodotti, le Fatture, i Clienti, etc.
I modelli sono descritti da classi Python che ereditano da una classe generica del framework Odoo le loro funzionalità base. Il loro compito principale è quello di tradurre il loro schema sulle tabelle del database.</description>
    </item>
    
    <item>
      <title>Installazione</title>
      <link>https://metadonors.github.io/odoo.workshop/basics/installazione/</link>
      <pubDate>Wed, 27 Jun 2018 15:33:28 +0200</pubDate>
      
      <guid>https://metadonors.github.io/odoo.workshop/basics/installazione/</guid>
      <description>Una volta installati gli strumenti di sviluppo come descritto nella sezione Precorso possiamo procedere ad installare l&amp;rsquo;ambiente di odoo che utilizzeremo in questo corso.
Installazione dell&amp;rsquo;ambiente di sviluppo Scaricate l&amp;rsquo;ambiente docker che utilizzeremo dal github in una cartella sul nostro computer. Aprite un terminale e digitate:
$ git clone https://github.com/metadonors/odoo.docker.git  Entriamo nella cartella appena scaricata:
$ cd odoo.docker  Infine diciamo a compose di tirare su l&amp;rsquo;ambiente:
$ docker-compose up  Compose comincerà a scaricare tutte le nostre dipendenze, odoo, nginx e il database.</description>
    </item>
    
    <item>
      <title>Relazioni</title>
      <link>https://metadonors.github.io/odoo.workshop/models/relazioni/</link>
      <pubDate>Thu, 28 Jun 2018 16:52:26 +0200</pubDate>
      
      <guid>https://metadonors.github.io/odoo.workshop/models/relazioni/</guid>
      <description>Abbiamo visto come lavoare con tipi di campi non relazionali, ma nelle applicazioni reali una buona parte delle strutture dati descrivono relazioni fra le entità. L&amp;rsquo;ORM di Odoo è in grado di gestire i vari tipi di relazioni fra oggetti, mettendo a disposizione un set di funzionalità pronte all&amp;rsquo;uso.
Per avere chiaro cosa stiamo per fare, chiariamo cosa vogliamo costruire. Finora abbiamo lavorato con l&amp;rsquo;oggetto TodoTask. Adesso aggiungeremo il modello TodoProject che raggruppa i Task, e il modello TodoTag che li classifica.</description>
    </item>
    
    <item>
      <title>Estendere le Viste</title>
      <link>https://metadonors.github.io/odoo.workshop/inheritance/estendere_viste/</link>
      <pubDate>Thu, 28 Jun 2018 16:39:23 +0200</pubDate>
      
      <guid>https://metadonors.github.io/odoo.workshop/inheritance/estendere_viste/</guid>
      <description>Un po&amp;rsquo; di teoria Le viste Form, List e Search sono definite utilizzando la struttura XML arch. Per estenderle dobbiamo modificare quelle definizioni XML e farlo significa localizzare i tag XML che vogliamo cambiare e introdurre le nostre modifiche in quei punti.
Cominciamo subito con un esempio di una vista che ne estende un&amp;rsquo;altra:
&amp;lt;record model=&amp;quot;ir.ui.view&amp;quot; id=&amp;quot;todo_task_form_view_inherited&amp;quot;&amp;gt; &amp;lt;field name=&amp;quot;name&amp;quot;&amp;gt;todo.task.form&amp;lt;/field&amp;gt; &amp;lt;field name=&amp;quot;model&amp;quot;&amp;gt;todo.task&amp;lt;/field&amp;gt; &amp;lt;field name=&amp;quot;inherit_id&amp;quot; ref=&amp;quot;todo_task_form_view&amp;quot;/&amp;gt; &amp;lt;field name=&amp;quot;arch&amp;quot; type=&amp;quot;xml&amp;quot;&amp;gt; &amp;lt;!-- ...cerca e modifica i tag XML in questo punto.</description>
    </item>
    
    <item>
      <title>Le viste</title>
      <link>https://metadonors.github.io/odoo.workshop/first_app/prime_viste/</link>
      <pubDate>Thu, 28 Jun 2018 10:38:52 +0200</pubDate>
      
      <guid>https://metadonors.github.io/odoo.workshop/first_app/prime_viste/</guid>
      <description>Le viste descrivono l&amp;rsquo;interfaccia utente. Ogni vista è strutturata in un file XML, che è utilizzato dal client web per generare le pagine HTML in grado di gestire i dati generati dal nostro backend.
Nelle viste abbiamo dei menu item che ci permettono di attivare funzionalità o navigazione scatenando delle actions. Per esempio, il menu item Users processa una action chiamata anchessa Users, che renderizza le viste per la gestione degli utenti.</description>
    </item>
    
    <item>
      <title>Concetti Base</title>
      <link>https://metadonors.github.io/odoo.workshop/basics/concetti/</link>
      <pubDate>Wed, 27 Jun 2018 23:17:43 +0200</pubDate>
      
      <guid>https://metadonors.github.io/odoo.workshop/basics/concetti/</guid>
      <description>Prima di cominciare è necessario affrontare un po&amp;rsquo; di teoria che sta alla base del framework Odoo. Odoo è un framework applicativo modulare, i suoi principali componenti sono i moduli e le applicazioni.
Moduli I moduli sono i componenti essenziali che possono essere aggiunti a Odoo. Ogni modulo può implementare nuove funzionalità oppure modificare quelle esistenti. Ogni modulo è costituito da una cartella contenente un file __manfifest.py__ più altri file che implementano le sue funzionalità.</description>
    </item>
    
    <item>
      <title>Computed Fields</title>
      <link>https://metadonors.github.io/odoo.workshop/models/computed_fields/</link>
      <pubDate>Thu, 28 Jun 2018 16:52:30 +0200</pubDate>
      
      <guid>https://metadonors.github.io/odoo.workshop/models/computed_fields/</guid>
      <description>Tutti i campi che abbiamo definito fin qui sono gestiti manualmente. L&amp;rsquo;utente entra in modalità modifica di un oggetto, aggiorna i valori e preme salva. Oddo permette però di avere altri campi il cui valore non viene definito direttamente dall&amp;rsquo;utente ma viene invece calcola attraverso una funzione.
Computed fields Un computed field viene dichiarato esattamente come i campi normali con l&amp;rsquo;unica differenza di avere un parametro compute che indica la funzione che Odoo utilizzerà per calcolarne il valore.</description>
    </item>
    
    <item>
      <title>Estendere i Dati</title>
      <link>https://metadonors.github.io/odoo.workshop/inheritance/estendere_dati/</link>
      <pubDate>Thu, 28 Jun 2018 16:39:25 +0200</pubDate>
      
      <guid>https://metadonors.github.io/odoo.workshop/inheritance/estendere_dati/</guid>
      <description>A differenza delle viste i file xml contenenti dati, come i menuitem oppure le security rules, non hanno l&amp;rsquo;elemento arch e non possono quindi essere modificati utilizzanto XPath. Ma possono comunque essere modificati, rimpiazzando i valori contenuti nei loro campi.
Ogni volta che dichiariamo un &amp;lt;record id=&amp;ldquo;x&amp;rdquo; model=&amp;ldquo;y&amp;rdquo;&amp;gt; Odoo effettua una insert o una update nel database, quindi riutilizzando gli stessi id possiamo andare ad aggiornare i dati inseriti dai moduli genitori.</description>
    </item>
    
    <item>
      <title>La logica</title>
      <link>https://metadonors.github.io/odoo.workshop/first_app/prima_funzione/</link>
      <pubDate>Thu, 28 Jun 2018 10:38:58 +0200</pubDate>
      
      <guid>https://metadonors.github.io/odoo.workshop/first_app/prima_funzione/</guid>
      <description>A questo punto è arrivato il momento di aggiungere della logica applicativa al nostro modulo. Per farlo possiamo sfruttare i bottoni che abbiamo aggiunto nella sezione precedente relativa alle viste.
Aggiungere la logica applicativa Nella precedente sezione abbiamo aggiunto due bottoni per invocare delle funzioni Python sul nostro backend. Riporto qui il codice interessato per comodità.
&amp;lt;button name=&amp;quot;do_toggle_button&amp;quot; type=&amp;quot;object&amp;quot; string=&amp;quot;Toggle Done&amp;quot; class=&amp;quot;oe_highlight&amp;quot;/&amp;gt;  In questo tag stiamo definendo alcuni attributi, vediamoli nel dettaglio:</description>
    </item>
    
    <item>
      <title>Vincoli</title>
      <link>https://metadonors.github.io/odoo.workshop/models/vincoli/</link>
      <pubDate>Thu, 28 Jun 2018 16:52:30 +0200</pubDate>
      
      <guid>https://metadonors.github.io/odoo.workshop/models/vincoli/</guid>
      <description>Per assicurare l&amp;rsquo;integrità dei nostri dati Odoo ci fornisce due strumenti principali che possiamo applicare ai nostri modelli: Vincoli SQL e Vincoli Python.
Vincoli SQL I vincoli SQL sono aggunti direttamente alla definizione della tabella a livello di database e sono controllati quindi direttamente da PostgreSQL. Una volta configurati non sarà quindi possibile creare eccezioni per aggirarli.
Per configurare un vincolo sql si aggiunge un attributo sql_constraints che è un alista di tuple, in ogni tupla viene espresso l&amp;rsquo;identificatore del vincolo, il codice SQL per il vincolo e il messaggio di errore da usare.</description>
    </item>
    
    <item>
      <title>Aggiungere funzionalità</title>
      <link>https://metadonors.github.io/odoo.workshop/inheritance/aggiungere_funzionalita/</link>
      <pubDate>Thu, 28 Jun 2018 16:39:25 +0200</pubDate>
      
      <guid>https://metadonors.github.io/odoo.workshop/inheritance/aggiungere_funzionalita/</guid>
      <description>Finora abbiamo visto come estendere applicazioni esistenti aggiungendo funzionalità create da noi. Ma Odoo permette di fare molto di più: possiamo aggiungere funzionalità implementate in moduli scritti da altre persone.
Nel nostro caso vogliamo aggiugere la possibilità per gli utenti di commentare i task e di poterli seguire, alla maniera di Twitter. Questa funzionalità in Odoo è implementata nel modulo mail, più specificatamente nel modello mail.thread di quel modulo.</description>
    </item>
    
    <item>
      <title>Controllo Accessi</title>
      <link>https://metadonors.github.io/odoo.workshop/first_app/controllo_accessi/</link>
      <pubDate>Thu, 28 Jun 2018 10:40:25 +0200</pubDate>
      
      <guid>https://metadonors.github.io/odoo.workshop/first_app/controllo_accessi/</guid>
      <description>Nella scorsa sezione abbiamo terminato la creazione del nostro modulo base. Al termine abbiamo notato che Odoo si lamentava dicendo che non abbiamo specificato delle regole di accesso per il modello da noi creato
WARNING demo odoo.modules.loading: The model todo.task has no access rules, consider adding one. E.g. access_todo_task,access_todo_task,model_todo_task,,1,0,0,0  In Odoo tutti i modelli devono avere delle regole di accesso specificate, in caso contrario solo l&amp;rsquo;utente admin potrà accedere ai dati relativi a quel modello.</description>
    </item>
    
  </channel>
</rss>