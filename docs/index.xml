<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Index on Odoo Workshop</title>
    <link>https://metadonors.github.io/odoo.workshop/</link>
    <description>Recent content in Index on Odoo Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>it-it</language>
    <lastBuildDate>Wed, 27 Jun 2018 15:32:30 +0200</lastBuildDate>
    
	<atom:link href="https://metadonors.github.io/odoo.workshop/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Teoria</title>
      <link>https://metadonors.github.io/odoo.workshop/inheritance/teoria/</link>
      <pubDate>Thu, 28 Jun 2018 16:39:19 +0200</pubDate>
      
      <guid>https://metadonors.github.io/odoo.workshop/inheritance/teoria/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Scaffolding</title>
      <link>https://metadonors.github.io/odoo.workshop/first_app/primo_modulo/</link>
      <pubDate>Wed, 27 Jun 2018 17:59:32 +0200</pubDate>
      
      <guid>https://metadonors.github.io/odoo.workshop/first_app/primo_modulo/</guid>
      <description>In questa sezione andremo a creare il nostro primo modulo. L&amp;rsquo;applicazione d&amp;rsquo;esempio che creeremo durante il corso è una classica Todo App. Per realizzarla attraverseremo le classiche fasi di sviluppo di un applicazione Odoo.
Lo scheletro del modulo Odoo offre un suo meccanismo di scaffolding piuttosto primitivo per creare nuovi moduli, è possibile visualizzare il suo funzionamento lanciando questo comando dalla cartella contente l&amp;rsquo;ambiente odoo.dockerenv:
$ docker-compose run odoo odoo scaffold --help  Nella pratica la comunità si è però concentrata su un altro strumento di scaffolding, mrbob con i template specifici per gli addon Odoo.</description>
    </item>
    
    <item>
      <title>Precorso</title>
      <link>https://metadonors.github.io/odoo.workshop/basics/precorso/</link>
      <pubDate>Wed, 27 Jun 2018 16:37:24 +0200</pubDate>
      
      <guid>https://metadonors.github.io/odoo.workshop/basics/precorso/</guid>
      <description>Prima di arrivare al corso sarebbe opportuno avere già installati e funzionanti un edito di testo, Git, Docker e Docker Compose
Editor di testo Non ci sono preferenze per l&amp;rsquo;editor di testo, ovviamente è opportuno usarne uno che aiuti a lavorare con codice python e javascript
Un elenco di alcuni possibili editor:
 VSCode https://code.visualstudio.com/ Atom https://atom.io/ Sublime Text https://www.sublimetext.com/  Git L&amp;rsquo;installazione di Git varia in base al sistema operativo utilizzato, ecco come procedere:</description>
    </item>
    
    <item>
      <title>Estendere i Modelli</title>
      <link>https://metadonors.github.io/odoo.workshop/inheritance/estendere_modelli/</link>
      <pubDate>Thu, 28 Jun 2018 16:39:19 +0200</pubDate>
      
      <guid>https://metadonors.github.io/odoo.workshop/inheritance/estendere_modelli/</guid>
      <description></description>
    </item>
    
    <item>
      <title>I modelli</title>
      <link>https://metadonors.github.io/odoo.workshop/first_app/primo_modello/</link>
      <pubDate>Thu, 28 Jun 2018 10:36:46 +0200</pubDate>
      
      <guid>https://metadonors.github.io/odoo.workshop/first_app/primo_modello/</guid>
      <description>Ora che abbiamo la nostra prima applicazione iniziamo ad aggiungere un semplice modello.
I modelli sono la M del paradigma MVC, rappresento i dati su cui la nostra applicazione lavora. Sono dei modelli i Prodotti, le Fatture, i Clienti, etc.
I modelli sono descritti da classi Python che ereditano da una classe generica del framework Odoo le loro funzionalità base. Il loro compito principale è quello di tradurre il loro schema sulle tabelle del database.</description>
    </item>
    
    <item>
      <title>Installazione</title>
      <link>https://metadonors.github.io/odoo.workshop/basics/installazione/</link>
      <pubDate>Wed, 27 Jun 2018 15:33:28 +0200</pubDate>
      
      <guid>https://metadonors.github.io/odoo.workshop/basics/installazione/</guid>
      <description>Una volta installati gli strumenti di sviluppo come descritto nella sezione Precorso possiamo procedere ad installare l&amp;rsquo;ambiente di odoo che utilizzeremo in questo corso.
Installazione dell&amp;rsquo;ambiente di sviluppo Scaricate l&amp;rsquo;ambiente docker che utilizzeremo dal github in una cartella sul nostro computer. Aprite un terminale e digitate:
$ git clone https://github.com/metadonors/odoo.docker.git  Entriamo nella cartella appena scaricata:
$ cd odoo.docker  Infine diciamo a compose di tirare su l&amp;rsquo;ambiente:
$ docker-compose up  Compose comincerà a scaricare tutte le nostre dipendenze, odoo, nginx e il database.</description>
    </item>
    
    <item>
      <title>Estendere le Viste</title>
      <link>https://metadonors.github.io/odoo.workshop/inheritance/estendere_viste/</link>
      <pubDate>Thu, 28 Jun 2018 16:39:23 +0200</pubDate>
      
      <guid>https://metadonors.github.io/odoo.workshop/inheritance/estendere_viste/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Le viste</title>
      <link>https://metadonors.github.io/odoo.workshop/first_app/prime_viste/</link>
      <pubDate>Thu, 28 Jun 2018 10:38:52 +0200</pubDate>
      
      <guid>https://metadonors.github.io/odoo.workshop/first_app/prime_viste/</guid>
      <description>Le viste descrivono l&amp;rsquo;interfaccia utente. Ogni vista è strutturata in un file XML, che è utilizzato dal client web per generare le pagine HTML in grado di gestire i dati generati dal nostro backend.
Nelle viste abbiamo dei menu item che ci permettono di attivare funzionalità o navigazione scatenando delle actions. Per esempio, il menu item Users processa una action chiamata anchessa Users, che renderizza le viste per la gestione degli utenti.</description>
    </item>
    
    <item>
      <title>Concetti Base</title>
      <link>https://metadonors.github.io/odoo.workshop/basics/concetti/</link>
      <pubDate>Wed, 27 Jun 2018 23:17:43 +0200</pubDate>
      
      <guid>https://metadonors.github.io/odoo.workshop/basics/concetti/</guid>
      <description>Prima di cominciare è necessario affrontare un po&amp;rsquo; di teoria che sta alla base del framework Odoo. Odoo è un framework applicativo modulare, i suoi principali componenti sono i moduli e le applicazioni.
Moduli I moduli sono i componenti essenziali che possono essere aggiunti a Odoo. Ogni modulo può implementare nuove funzionalità oppure modificare quelle esistenti. Ogni modulo è costituito da una cartella contenente un file __manfifest.py__ più altri file che implementano le sue funzionalità.</description>
    </item>
    
    <item>
      <title>Estendere i Dati</title>
      <link>https://metadonors.github.io/odoo.workshop/inheritance/estendere_dati/</link>
      <pubDate>Thu, 28 Jun 2018 16:39:25 +0200</pubDate>
      
      <guid>https://metadonors.github.io/odoo.workshop/inheritance/estendere_dati/</guid>
      <description></description>
    </item>
    
    <item>
      <title>La logica</title>
      <link>https://metadonors.github.io/odoo.workshop/first_app/prima_funzione/</link>
      <pubDate>Thu, 28 Jun 2018 10:38:58 +0200</pubDate>
      
      <guid>https://metadonors.github.io/odoo.workshop/first_app/prima_funzione/</guid>
      <description>A questo punto è arrivato il momento di aggiungere della logica applicativa al nostro modulo. Per farlo possiamo sfruttare i bottoni che abbiamo aggiunto nella sezione precedente relativa alle viste.
Aggiungere la logica applicativa Nella precedente sezione abbiamo aggiunto due bottoni per invocare delle funzioni Python sul nostro backend. Riporto qui il codice interessato per comodità.
&amp;lt;button name=&amp;quot;do_toggle_button&amp;quot; type=&amp;quot;object&amp;quot; string=&amp;quot;Toggle Done&amp;quot; class=&amp;quot;oe_highlight&amp;quot;/&amp;gt;  In questo tag stiamo definendo alcuni attributi, vediamoli nel dettaglio:</description>
    </item>
    
    <item>
      <title>Controllo Accessi</title>
      <link>https://metadonors.github.io/odoo.workshop/first_app/controllo_accessi/</link>
      <pubDate>Thu, 28 Jun 2018 10:40:25 +0200</pubDate>
      
      <guid>https://metadonors.github.io/odoo.workshop/first_app/controllo_accessi/</guid>
      <description>Nella scorsa sezione abbiamo terminato la creazione del nostro modulo base. Al termine abbiamo notato che Odoo si lamentava dicendo che non abbiamo specificato delle regole di accesso per il modello da noi creato
WARNING demo odoo.modules.loading: The model todo.task has no access rules, consider adding one. E.g. access_todo_task,access_todo_task,model_todo_task,,1,0,0,0  In Odoo tutti i modelli devono avere delle regole di accesso specificate, in caso contrario solo l&amp;rsquo;utente admin potrà accedere ai dati relativi a quel modello.</description>
    </item>
    
  </channel>
</rss>